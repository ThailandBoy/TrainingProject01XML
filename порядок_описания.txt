В этом проекте будем работать через Spring core.
Конфигурационный файл сделан через xml.
Следующий проект сконфигурирован через анотацию.
1. Собрать проект через мавен, архетип webapp
2. в pom.xml импортируем нужные зависимости
    - spring-core; spring-beans; spring-context
3. создать директорию "resources"
    - пометить как "resources root"
    - все файлы которые мы поместим в эту папку, они будут доступны в нашем коде.
        Таково назначение данной папки ресурсов.
    - в этой папке будет размещена наша конфигурация спринга
4. создать папку "java", в ней будет весь наш java код
    - пометить папку как "sources root", так мы дадим понять "идее" что там будет храниться java код
5. создать папку в папке java -> ru.alishev.springcourse
6. в папке ru.alishev.springcourse создем java класс TestBean
7. TestBean - теоретическое описание
8. Переход в папку "resources". Здесь создадим конфигурационный файл спринга. "ApplicationContext.xml"
    Из https://gist.github.com/NeilAlishev/a7be183f5c0d612cc6ebf287e129bed5
    Копируем и вставляем конфиг.
    - теор. описание
9. Конфиг файл для спринга готов, теперь нужно чтобы:
    - спринг прочитал этот файл
    - и создал этот бин и положил его в свой ApplicationContext
    - затем мы извлечем этот бин из ApplicationContext
    9.1 В директории ru.alishev.springcourse создим новый класс TestSpring. В этом классе будем тестировать
        работу нашего спринг фреймворка.
        - Описание дальше в нем.

Inversion of Control
1. Go to "inversionOfControlExplaining"
2. Проблема сильной зависимости в классе StrongDependency.java - описание там же
    Решение проблемы в StrongDependencySolved.java - описание там же
    Решение: использование интерфейса
    По воможости всегда используйте интерфейс при инициализации объектов.
3. Проблема слабой зависимости.
    Данная проблема, является проблемой решения сильной зависимоси.
    Тоесть при необходимости добавления новых жанров музыки, согласно примеру,
    потребуется вручную менять реализацию playMusic(), создания объектов. Соответственно
    перекомпилировать наш Java проект.
    Решение: Если созданием объектов займется Spring Framework, то dev нужно будет лишь
    обращатся к уже инициализированным объектам Spring, эти объекты называт бинами.
    Объекты которые станут бинами, пишутся в конфигурационном файле .xml или appConfig.java файле.
3.1 Но добавление бинов, не решает проблему.
    Для решения проблемы необходимо использовать архитектурный подход IoC.
    В решении сильной зависимости, объекты инициализируются внутри самого метода.
    Данный подход является архитектурно неправильным, он противоречит IoC.
    Решение в файле DependencyInjection





